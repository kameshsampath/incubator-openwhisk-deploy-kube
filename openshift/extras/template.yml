apiVersion: v1
kind: Template
metadata:
  name: openwhisk
labels:
  template: openwhisk
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: whisk.config
  data:
    whisk_cli_version_tag: latest
    whisk_system_namespace: /whisk.system
    whisk_version_date: 2018-01-01T00:00:00Z
    whisk_version_name: OpenWhisk
    whisk_version_tag: latest
- apiVersion: v1
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: whisk.limits
  data:
    actions_invokes_concurrent: "30"
    actions_invokes_concurrentInSystem: "5000"
    actions_invokes_perMinute: "60"
    actions_sequence_maxLength: "50"
    triggers_fires_perMinute: "60"
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: whisk.runtimes
  data:
    runtimes: |
      {
          "bypassPullForLocalImages": false,
          "defaultImagePrefix": "openwhisk",
          "defaultImageTag": "latest",
          "runtimes": {
              "nodejs": [
                  {
                      "kind": "nodejs",
                      "image": {
                          "name": "nodejsaction"
                      },
                      "deprecated": true
                  },
                  {
                      "kind": "nodejs:6",
                      "default": true,
                      "image": {
                          "name": "nodejs6action"
                      },
                      "deprecated": false
                  },
                  {
                      "kind": "nodejs:8",
                      "default": false,
                      "image": {
                          "name": "action-nodejs-v8"
                      },
                      "deprecated": false
                  }
              ],
              "python": [
                  {
                      "kind": "python",
                      "image": {
                          "name": "python2action"
                      },
                      "deprecated": false
                  },
                  {
                      "kind": "python:2",
                      "default": true,
                      "image": {
                          "name": "python2action"
                      },
                      "deprecated": false
                  },
                  {
                      "kind": "python:3",
                      "image": {
                          "name": "python3action"
                      },
                      "deprecated": false
                  }
              ],
              "swift": [
                  {
                      "kind": "swift",
                      "image": {
                          "name": "swiftaction"
                      },
                      "deprecated": true
                  },
                  {
                      "kind": "swift:3",
                      "image": {
                          "name": "swift3action"
                      },
                      "deprecated": true
                  },
                  {
                      "kind": "swift:3.1.1",
                      "default": true,
                      "image": {
                          "name": "action-swift-v3.1.1"
                      },
                      "deprecated": false
                  }
              ],
              "java": [
                  {
                      "kind": "java",
                      "default": true,
                      "image": {
                          "name": "java8action"
                      },
                      "deprecated": false,
                      "attached": {
                          "attachmentName": "jarfile",
                          "attachmentType": "application/java-archive"
                      },
                      "sentinelledLogs": false,
                      "requireMain": true
                  }
              ],
              "php": [
                  {
                      "kind": "php:7.1",
                      "default": true,
                      "deprecated": false,
                      "image": {
                          "name": "action-php-v7.1"
                      }
                  }
              ]
          },
          "blackboxes": [
              {
                  "name": "dockerskeleton"
              }
          ]
      }
- apiVersion: v1
  kind: Service
  metadata:
    name: controller
    labels:
      name: controller
  spec:
    selector:
      name: controller
    clusterIP: None
    ports:
      - port: 8080
        targetPort: 8080
        name: http
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: controller.config
  data:
    controller_opts: ""
    java_opts: -Xmx2g
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: controller
    labels:
      name: controller
  spec:
    replicas: 1
    serviceName: "controller"
    template:
      metadata:
        labels:
          name: controller
      spec:
        restartPolicy: Always
        containers:
        - name: controller
          imagePullPolicy: IfNotPresent
          image: projectodd/controller:openshift-latest
          command: ["/bin/bash", "-c", "COMPONENT_NAME=$(hostname | cut -d'-' -f2) /init.sh `hostname | cut -d'-' -f2`"]
          ports:
          - name: controller
            containerPort: 8080
          env:
          # Properties for controller HA configuration
          # Must change these if changing number of replicas
          - name: "CONTROLLER_LOCALBOOKKEEPING"
            value: "TRUE"
          - name: "CONTROLLER_HA"
            value: "FALSE"
          - name: "CONTROLLER_INSTANCES"
            value: "1"
          - name: "AKKA_CLUSTER_SEED_NODES"
            value: "controller-0.controller.openwhisk"
          - name: "CONFIG_akka_actor_provider"
            value: "cluster"
  
          # extra JVM arguments
          - name: "JAVA_OPTS"
            valueFrom:
              configMapKeyRef:
                name: controller.config
                key: java_opts
  
          # extra controller arguments
          - name: "CONTROLLER_OPTS"
            valueFrom:
              configMapKeyRef:
                name: controller.config
                key: controller_opts
  
          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            valueFrom:
              configMapKeyRef:
                name: whisk.runtimes
                key: runtimes
  
          # deployment version information
          - name:  "WHISK_VERSION_NAME"
            valueFrom:
              configMapKeyRef:
                name: whisk.config
                key: whisk_version_name
          - name:  "WHISK_VERSION_DATE"
            valueFrom:
              configMapKeyRef:
                name: whisk.config
                key: whisk_version_date
          - name: "WHISK_VERSION_BUILDNO"
            valueFrom:
              configMapKeyRef:
                name: whisk.config
                key: whisk_version_tag
  
          # specify limits
          - name: "LIMITS_ACTIONS_INVOKES_PERMINUTE"
            valueFrom:
              configMapKeyRef:
                name: whisk.limits
                key: actions_invokes_perMinute
          - name: "LIMITS_ACTIONS_INVOKES_CONCURRENT"
            valueFrom:
              configMapKeyRef:
                name: whisk.limits
                key: actions_invokes_concurrent
          - name: "LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM"
            valueFrom:
              configMapKeyRef:
                name: whisk.limits
                key: actions_invokes_concurrentInSystem
          - name: "LIMITS_TRIGGERS_FIRES_PERMINUTE"
            valueFrom:
              configMapKeyRef:
                name: whisk.limits
                key: triggers_fires_perMinute
          - name: "LIMITS_ACTIONS_SEQUENCE_MAXLENGTH"
            valueFrom:
              configMapKeyRef:
                name: whisk.limits
                key: actions_sequence_maxLength
  
          # properties for Kafka connection
          - name: "KAFKA_HOSTS"
            value: "$(KAFKA_SERVICE_HOST):$(KAFKA_SERVICE_PORT_KAFKA)"
  
          # properties for DB connection
          - name: "DB_USERNAME"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_username
          - name: "DB_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_password
          - name:  "DB_PROTOCOL"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_protocol
          - name: "DB_HOST"
            value: "$(COUCHDB_SERVICE_HOST)"
          - name: "DB_PORT"
            value: "$(COUCHDB_SERVICE_PORT_COUCHDB)"
          - name: "DB_PROVIDER"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_provider
          - name: "DB_WHISK_ACTIVATIONS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_activations
          - name: "DB_WHISK_ACTIONS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_actions
          - name: "DB_WHISK_AUTHS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_auths
  
          # must match port used in livenessProbe below
          - name: "PORT"
            value: "8080"
  
          livenessProbe:
            httpGet:
              path: "/ping"
              port: 8080
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: "/ping"
              port: 8080
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
        initContainers:
        - name: wait-for-services
          image: busybox
          command: ['sh', '-cu', 'echo "$COUCHDB_SERVICE_HOST $KAFKA_SERVICE_HOST"']
        - name: wait-for-couchdb
          image: busybox
          command: ['sh', '-c', 'until wget -T 5 --spider http://${COUCHDB_SERVICE_HOST}:${COUCHDB_SERVICE_PORT}/_all_dbs; do echo waiting for couchdb; sleep 2; done;']
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: install-catalog
  spec:
    activeDeadlineSeconds: 600
    template:
      metadata:
        name: install-catalog
      spec:
        containers:
        - name: catalog
          image: projectodd/whisk_catalog:openshift-latest
          env:
            - name: "WHISK_CLI_VERSION"
              valueFrom:
                configMapKeyRef:
                  name: whisk.config
                  key: whisk_cli_version_tag
            - name: "WHISK_AUTH"
              valueFrom:
                secretKeyRef:
                  name: whisk.auth
                  key: system
            - name: "WHISK_API_HOST_NAME"
              value: "http://controller:8080"
        initContainers:
        - name: wait-for-controller
          image: busybox
          command: ['sh', '-c', 'until wget -T 5 --spider http://controller:8080/ping; do echo waiting for controller; sleep 2; done;']
        restartPolicy: Never
- apiVersion: v1
  kind: Service
  metadata:
    name: couchdb
    labels:
      name: couchdb
  spec:
    selector:
      name: couchdb
    ports:
      - port: 5984
        targetPort: 5984
        name: couchdb
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: db.config
  data:
    db_prefix: test_
    db_protocol: http
    db_provider: CouchDB
    db_whisk_actions: test_whisks
    db_whisk_activations: test_activations
    db_whisk_auths: test_subjects
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: couchdb
    labels:
      name: couchdb
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          name: couchdb
      spec:
        restartPolicy: Always
        volumes:
        - name: couchdb-data
          emptyDir: {}
        containers:
        - name: couchdb
          imagePullPolicy: IfNotPresent
          image: projectodd/whisk_couchdb:openshift-latest
          command: ["/init.sh"]
          ports:
          - name: couchdb
            containerPort: 5984
          env:
          - name: "DB_PREFIX"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_prefix
          - name: "DB_HOST"
            value: "127.0.0.1"
          - name: "COUCHDB_USER"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_username
          - name: "COUCHDB_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_password
          - name: "DB_PORT"
            value: "5984"
          - name: "NODENAME"
            value: "couchdb0"
          volumeMounts:
          - name: couchdb-data
            mountPath: "/opt/couchdb/data"
          readinessProbe:
            httpGet:
              port: 5984
              # Tempting to say "/$(DB_PREFIX)_activations", but probe runs
              # externally, therefore can't access the container environment...
              path: "/test_activations"
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 10
            timeoutSeconds: 1
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: invoker.config
  data:
    docker_image_prefix: projectodd
    docker_image_tag: openshift-latest
    docker_registry: ""
    invoker_container_dns: ""
    invoker_container_network: bridge
    invoker_logs_dir: ""
    invoker_opts: "-Dwhisk.spi.ContainerFactoryProvider=whisk.core.containerpool.kubernetes.KubernetesContainerFactoryProvider"
    invoker_use_runc: "false"
    java_opts: -Xmx2g
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: invoker
  data:
    init: |
      export ORDINAL=$(hostname | cut -d'-' -f2)
      echo "Waiting for controller to be available"
      until $(curl --output /dev/null --silent --head --fail http://controller:8080/ping); do printf '.'; sleep 1; done
      export COMPONENT_NAME=${ORDINAL}
      export TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
      export NAMESPACE="$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)"
      export APIGW_HOST=$(curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer ${TOKEN}" "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/oapi/v1/namespaces/${NAMESPACE}/routes/openwhisk?pretty=true" | grep '"host":' | head -n 1 | awk -F '"' '{print $4}')
      export APIGW_HOST_V2=${APIGW_HOST}
      export WHISK_API_HOST_NAME=${APIGW_HOST}
      exec /init.sh
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: openwhisk
- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: openwhisk
  roleRef:
    name: edit
  subjects:
    - kind: ServiceAccount
      name: openwhisk
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: invoker
    labels:
      name: invoker
  spec:
    replicas: 1
    serviceName: "invoker"
    template:
      metadata:
        labels:
          name: invoker
      spec:
        restartPolicy: Always
        volumes:
        - name: invoker-config
          configMap:
            name: invoker
        serviceAccountName: openwhisk
  
        initContainers:
        - name: wait-for-services
          image: busybox
          command: ['sh', '-cu', 'echo "$COUCHDB_SERVICE_HOST $ZOOKEEPER_SERVICE_HOST $KAFKA_SERVICE_HOST"']
  
        containers:
        - name: invoker
          imagePullPolicy: IfNotPresent
          image: projectodd/invoker:openshift-latest
          command: [ "/bin/bash", "-o", "allexport", "/invoker_config/init" ]
          ports:
          - name: invoker
            containerPort: 8080
          volumeMounts:
          - name: invoker-config
            mountPath: "/invoker_config"
          env:
            - name: "PORT"
              value: "8080"
  
            # Invoker name is name of the Kube node when using DaemonSet
            - name: "INVOKER_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
  
            # Docker-related options
            - name: "INVOKER_CONTAINER_NETWORK"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: invoker_container_network
            - name: "INVOKER_CONTAINER_DNS"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: invoker_container_dns
            - name: "INVOKER_USE_RUNC"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: invoker_use_runc
            - name: "DOCKER_IMAGE_PREFIX"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: docker_image_prefix
            - name: "DOCKER_IMAGE_TAG"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: docker_image_tag
            - name: "DOCKER_REGISTRY"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: docker_registry
  
            # action runtimes
            - name: "RUNTIMES_MANIFEST"
              valueFrom:
                configMapKeyRef:
                  name: whisk.runtimes
                  key: runtimes
  
            # extra JVM arguments
            - name: "JAVA_OPTS"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: java_opts
  
            # extra Invoker arguments
            - name: "INVOKER_OPTS"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: invoker_opts
  
            # Recommend using "" because logs should go to stdout on kube
            - name: "WHISK_LOGS_DIR"
              valueFrom:
                configMapKeyRef:
                  name: invoker.config
                  key: invoker_logs_dir
  
            # properties for Kafka connection
            - name: "KAFKA_HOSTS"
              value: "$(KAFKA_SERVICE_HOST):$(KAFKA_SERVICE_PORT_KAFKA)"
  
            # properties for zookeeper connection
            - name: "ZOOKEEPER_HOSTS"
              value: "$(ZOOKEEPER_SERVICE_HOST):$(ZOOKEEPER_SERVICE_PORT_ZOOKEEPER)"
  
            # properties for DB connection
            - name: "DB_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: db.auth
                  key: db_username
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: db.auth
                  key: db_password
            - name:  "DB_PROTOCOL"
              valueFrom:
                configMapKeyRef:
                  name: db.config
                  key: db_protocol
            - name: "DB_HOST"
              value: "$(COUCHDB_SERVICE_HOST)"
            - name: "DB_PORT"
              value: "$(COUCHDB_SERVICE_PORT_COUCHDB)"
            - name: "DB_PROVIDER"
              valueFrom:
                configMapKeyRef:
                  name: db.config
                  key: db_provider
            - name: "DB_WHISK_ACTIVATIONS"
              valueFrom:
                configMapKeyRef:
                  name: db.config
                  key: db_whisk_activations
            - name: "DB_WHISK_ACTIONS"
              valueFrom:
                configMapKeyRef:
                  name: db.config
                  key: db_whisk_actions
            - name: "DB_WHISK_AUTHS"
              valueFrom:
                configMapKeyRef:
                  name: db.config
                  key: db_whisk_auths
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: preload-openwhisk-runtimes
    labels:
      name: preload-openwhisk-runtimes
  spec:
    completions: 1
    serviceAccountName: openwhisk
    template:
      metadata:
        labels:
          name: preload-openwhisk-runtimes
      spec:
        restartPolicy: Never
        containers:
        - name: preload-openwhisk-nodejs6
          image: projectodd/nodejs6action:openshift-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c", "echo", "success"]
        - name: preload-openwhisk-python2
          image: projectodd/python2action:openshift-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c", "echo", "success"]
        - name: preload-openwhisk-python3
          image: projectodd/python3action:openshift-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c", "echo", "success"]
        - name: preload-openwhisk-swift3
          image: projectodd/swift3action:openshift-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c", "echo", "success"]
        - name: preload-openwhisk-java8
          image: projectodd/java8action:openshift-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c", "echo", "success"]
- apiVersion: v1
  kind: Service
  metadata:
    name: kafka
    labels:
      name: kafka
  spec:
    selector:
      name: kafka
    ports:
      - port: 9092
        targetPort: 9092
        name: kafka
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: kafka
    labels:
      name: kafka
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          name: kafka
      spec:
        restartPolicy: Always
        volumes:
        - name: kafka-logs
          emptyDir: {}
        - name: kafka
          emptyDir: {}
  
        initContainers:
        - name: wait-for-zookeeper
          image: busybox
          command: ['sh', '-cu', 'nc -v -w 1 -z $ZOOKEEPER_SERVICE_HOST $ZOOKEEPER_SERVICE_PORT']
  
        containers:
        - name: kafka
          imagePullPolicy: IfNotPresent
          image: projectodd/whisk_kafka:openshift-latest
          ports:
          - name: kafka
            containerPort: 9092
          env:
          - name: "KAFKA_BROKER_ID"
            value: "0"
          - name: "KAFKA_ADVERTISED_HOST_NAME"
            value: "$(KAFKA_SERVICE_HOST)"
          - name: "KAFKA_ADVERTISED_PORT"
            value: "$(KAFKA_SERVICE_PORT_KAFKA)"
          - name: "KAFKA_HOST_NAME"
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: "KAFKA_PORT"
            value: "$(KAFKA_SERVICE_PORT_KAFKA)"
  
          # Need a writeable volume for OpenShift
          - name: "KAFKA_LOG_DIRS"
            value: "/data/logs"
  
          # zookeeper info
          - name: "KAFKA_ZOOKEEPER_CONNECT"
            value: "$(ZOOKEEPER_SERVICE_HOST):$(ZOOKEEPER_SERVICE_PORT_ZOOKEEPER)"
  
          volumeMounts:
            - name: kafka-logs
              mountPath: "/data"
            - name: kafka
              mountPath: "/kafka"
- apiVersion: v1
  kind: Service
  metadata:
    name: nginx
    labels:
      name: nginx
  spec:
    type: NodePort
    selector:
      name: nginx
    ports:
      - port: 80
        targetPort: 8080
        name: http
      - port: 8443
        targetPort: 8443
        name: https-admin
- apiVersion: v1
  kind: Route
  metadata:
    name: openwhisk
    labels:
      name: nginx
  spec:
    port:
      targetPort: http
    to:
      kind: Service
      name: nginx
      weight: 100
    wildcardPolicy: None
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nginx
  data:
    nginx.conf: |
      worker_rlimit_nofile 4096;
  
      events {
          worker_connections  4096;
      }
  
      http {
          client_max_body_size 50M;
  
          rewrite_log on;
          log_format combined-upstream '$remote_addr - $remote_user [$time_local] '
              '$request $status $body_bytes_sent '
              '$http_referer $http_user_agent $upstream_addr';
          access_log /logs/nginx_access.log combined-upstream;
  
          server {
              listen 8080 default;
  
              # match namespace, note while OpenWhisk allows a richer character set for a
              # namespace, not all those characters are permitted in the (sub)domain name;
              # if namespace does not match, no vanity URL rewriting takes place.
              server_name ~^(?<namespace>[0-9a-zA-Z-]+)\.localhost$;
  
              # proxy to the web action path
              location / {
                  if ($namespace) {
                    rewrite    /(.*) /api/v1/web/${namespace}/$1 break;
                  }
                  proxy_pass http://controller:8080;
                  proxy_read_timeout 75s; # 70+5 additional seconds to allow controller to terminate request
              }
  
              # proxy to 'public/html' web action by convention
              location = / {
                  if ($namespace) {
                    rewrite    ^ /api/v1/web/${namespace}/public/index.html break;
                  }
                  proxy_pass http://controller:8080;
                  proxy_read_timeout 75s; # 70+5 additional seconds to allow controller to terminate request
              }
  
              location /blackbox.tar.gz {
                  return 301 https://github.com/apache/incubator-openwhisk-runtime-docker/releases/download/sdk%400.1.0/blackbox-0.1.0.tar.gz;
              }
              # leaving this for a while for clients out there to update to the new endpoint
              location /blackbox-0.1.0.tar.gz {
                  return 301 /blackbox.tar.gz;
              }
  
              location /OpenWhiskIOSStarterApp.zip {
                  return 301 https://github.com/openwhisk/openwhisk-client-swift/releases/download/0.2.3/starterapp-0.2.3.zip;
              }
  
              # redirect requests for specific binaries to the matching one from the latest openwhisk-cli release.
              location /cli/go/download/linux/amd64 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-linux-amd64.tgz;
              }
              location /cli/go/download/linux/386 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-linux-386.tgz;
              }
              location /cli/go/download/mac/amd64 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-mac-amd64.zip;
              }
              location /cli/go/download/mac/386 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-mac-386.zip;
              }
              location /cli/go/download/windows/amd64 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-windows-amd64.zip;
              }
              location /cli/go/download/windows/386 {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-windows-386.zip;
              }
  
              # redirect top-level cli downloads to the latest openwhisk-cli release.
              location /cli/go/download {
                  return 301 https://github.com/apache/incubator-openwhisk-cli/releases/latest;
               }
          }
      }
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: nginx
    labels:
      name: nginx
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          name: nginx
      spec:
        restartPolicy: Always
        volumes:
        - name: nginx-conf
          configMap:
            name: nginx
        - name: logs
          emptyDir: {}
        containers:
        - name: nginx
          imagePullPolicy: IfNotPresent
          image: projectodd/whisk_nginx:openshift-latest
          ports:
          - name: http
            containerPort: 8080
          - name: https-admin
            containerPort: 8443
          volumeMounts:
          - name: nginx-conf
            mountPath: "/etc/nginx/nginx.conf"
            subPath: "nginx.conf"
          - name: logs
            mountPath: "/logs"
        initContainers:
        - name: wait-for-controller
          image: busybox
          command: ['sh', '-c', 'until wget -T 5 --spider http://controller:8080/ping; do echo waiting for controller; sleep 2; done;']
- apiVersion: v1
  kind: Secret
  metadata:
    name: whisk.auth
  type: Opaque
  data:
    guest: MjNiYzQ2YjEtNzFmNi00ZWQ1LThjNTQtODE2YWE0ZjhjNTAyOjEyM3pPM3haQ0xyTU42djJCS0sxZFhZRnBYbFBrY2NPRnFtMTJDZEFzTWdSVTRWck5aOWx5R1ZDR3VNREdJd1A=
    system: Nzg5YzQ2YjEtNzFmNi00ZWQ1LThjNTQtODE2YWE0ZjhjNTAyOmFiY3pPM3haQ0xyTU42djJCS0sxZFhZRnBYbFBrY2NPRnFtMTJDZEFzTWdSVTRWck5aOWx5R1ZDR3VNREdJd1A=
- apiVersion: v1
  kind: Secret
  metadata:
    name: db.auth
  type: Opaque
  data:
    db_password: Y291Y2hfcGFzc3dvcmQ=
    db_username: Y291Y2hfdXNlcm5hbWU=
- apiVersion: v1
  kind: Service
  metadata:
    name: zookeeper
    labels:
      name: zookeeper
  spec:
    selector:
      name: zookeeper
    ports:
      - port: 2181
        targetPort: 2181
        name: zookeeper
      - port: 2888
        targetPort: 2888
        name: server
      - port: 3888
        targetPort: 3888
        name: leader-election
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: zookeeper
    labels:
      name: zookeeper
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          name: zookeeper
      spec:
        restartPolicy: Always
        volumes:
        - name: zookeeper-data
          emptyDir: {}
        - name: zookeeper-datalog
          emptyDir: {}
        containers:
        - name: zookeeper
          image: projectodd/whisk_zookeeper:openshift-latest
          imagePullPolicy: IfNotPresent
          ports:
          - name: zookeeper
            containerPort: 2181
          - name: server
            containerPort: 2888
          - name: leader-election
            containerPort: 3888
          volumeMounts:
            - mountPath: /data
              name: zookeeper-data
            - mountPath: /datalog
              name: zookeeper-datalog
